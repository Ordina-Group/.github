# Workflow to deploy to an AWS environment with maven, terraform, build-image
# This workflow requires the maven wrapper to be in the root of the project

name: Deploy to AWS

on:
  push:
    branches:
      - $default-branch

concurrency:
  group: ${{ github.workflow }}

env:
  AWS_REGION: 'eu-west-1'
  AWS_ROLE: '' # TODO Fill in the role to assume for your deployment
  TF_DIR_INFRA: '' # TODO Fill in the terraform directory for your infra deployment
  TF_DIR_HELM: '' # TODO Fill in the terraform directory for your helm deployment
  JAVA_VERSION: '17'
  NODE_VERSION: 'lts/*'

jobs:

  deploy_infra:
    needs: release_please
    name: Deploy infra
    runs-on: self-hosted
    environment: dev

    defaults:
      run:
        shell: bash
        working-directory: ${{ env.TF_DIR_INFRA }}

    permissions:
      contents: read
      id-token: write  # This is required for requesting the JWT

    steps:
      - uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@8c3f20df09ac63af7b3ae3d7c91f105f857d8497 # v4.0.0
        with:
          role-to-assume: ${{ env.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: actions/setup-node@5e21ff4d9bc1a8cf6de233a3057d20ec6b3fb69d # v3.8.1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@633666f66e0061ca3b725c73b2ec20cd13a8fdd1 # v2.0.3

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Plan
        id: plan
        env:
          TERRAFORM_LOCK_TIMEOUT: 5m
        run: terraform plan -lock-timeout=${{ env.TERRAFORM_LOCK_TIMEOUT }}

      - name: Terraform Apply
        id: apply
        env:
          TERRAFORM_LOCK_TIMEOUT: 5m
        run: terraform apply -lock-timeout=${{ env.TERRAFORM_LOCK_TIMEOUT }} -auto-approve

  build_application:
    name: Build application and push to ECR
    needs: deploy_infra
    runs-on: self-hosted
    environment: dev

    permissions:
      contents: read
      id-token: write  # This is required for requesting the JWT

    env:
      ECR_REPOSITORY: '' # TODO set to your ECR repository name

    steps:
      - name: Checkout repo
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0

      - name: Set up JDK
        uses: actions/setup-java@0ab4596768b603586c0de567f2430c30f5b0d2b0 # v3.13.0
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: liberica
          cache: maven

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@8c3f20df09ac63af7b3ae3d7c91f105f857d8497 # v4.0.0
        with:
          role-to-assume: ${{ env.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@2fc7aceee09e9e4a7105c0d060c656fad0b4f63d # v1.7.0

      - name: Build with Maven
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: ./mvnw spring-boot:build-image -Dspring-boot.build-image.imageName=$ECR_REGISTRY/$ECR_REPOSITORY:${{ github.run_number }}

      - name: Push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.run_number }}

  deploy_application:
    needs: build_application
    runs-on: self-hosted
    environment: dev

    env:
      TERRAFORM_VAR_IMAGE_TAG: ${{ github.run_number }} # TODO setup your helm and terraform to read the IMAGE_TAG variable

    defaults:
      run:
        shell: bash
        working-directory: ${{ env.TF_DIR_HELM }}

    permissions:
      contents: read
      id-token: write  # This is required for requesting the JWT

    steps:
      - name: Checkout
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0

      - uses: actions/setup-node@5e21ff4d9bc1a8cf6de233a3057d20ec6b3fb69d # v3.8.1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install AWS cli
        uses: unfor19/install-aws-cli-action@3c53dab4dd62b5d9d647f0ce9519285250a3c767 # v1.0.6

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@8c3f20df09ac63af7b3ae3d7c91f105f857d8497 # v4.0.0
        with:
          role-to-assume: ${{ env.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@633666f66e0061ca3b725c73b2ec20cd13a8fdd1 # v2.0.3

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        env:
          TERRAFORM_LOCK_TIMEOUT: 5m
        run: terraform plan -lock-timeout=${{ env.TERRAFORM_LOCK_TIMEOUT }}

      - name: Terraform Apply
        id: apply
        env:
          TERRAFORM_LOCK_TIMEOUT: 5m
        run: terraform apply -lock-timeout=${{ env.TERRAFORM_LOCK_TIMEOUT }} -auto-approve
